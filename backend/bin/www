#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const nodeRepository = require('../repositories/nodeRepository')

require('dotenv').config()

const localtunnel = require('localtunnel');
startLocalTunnel();

const port = normalizePort(process.env.PORT || '61635');
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log(`server running: http://localhost:${port}`)

async function startLocalTunnel() {
  const tunnel = await localtunnel({ port: normalizePort(process.env.PORT || '61635')});

  app.set('tunnel', tunnel.url);
  console.log(`tunnel running: ${tunnel.url}`)
  
  console.log('setting as node...')
  await nodeRepository.insertNode({ host: tunnel.url, lastcheck: Date.now() })
  console.log('setted as node!')

  tunnel.on('close', async () => {
    // @todo: pensar em uma estratégia para reconexão
    console.log(`tunnel closed, trying reconnect`)
    startLocalTunnel()
  });
  return tunnel
}

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}